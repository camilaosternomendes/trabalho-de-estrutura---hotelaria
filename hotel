#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOME 50
#define MAX_QUARTOS 50
#define ARQUIVO "hospedes.txt"
// Definição da estrutura de dados para representar um hóspede
typedef struct Hospede {
    char nome[MAX_NOME];
    int quarto;
    struct Hospede *prox;
} Hospede;

// Definição da estrutura de dados para representar um hotel
typedef struct {
    Hospede *inicio;
} Hotel;
// Função para inicializar o hotel, alocando memória e inicializando a lista de hóspedes
Hotel* inicializarHotel() {
    // Aloca memória para a estrutura Hotel
    Hotel hotel = (Hotel)malloc(sizeof(Hotel));
 // Verifica se a alocação foi bem-sucedida
    if (hotel == NULL) {
        printf("Ops! Houve um erro ao criar o hotel. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
// Inicializa a lista de hóspedes como vazia
    hotel->inicio = NULL;
    return hotel;
}
// Função para cadastrar um novo hóspede no hotel
void cadastrarHospede(Hotel *hotel, char nome[], int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_QUARTOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n", MAX_QUARTOS);
        return;
    }
// Aloca memória para o novo hóspede
    Hospede novoHospede = (Hospede)malloc(sizeof(Hospede));
    // Verifica se a alocação foi bem-sucedida
    if (novoHospede == NULL) {
        printf("Ops! Houve um problema ao cadastrar o hóspede. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }

 // Copia o nome e atribui o número do quarto ao novo hóspede
    strcpy(novoHospede->nome, nome);
    novoHospede->quarto = quarto;
    // Insere o novo hóspede no início da lista de hóspedes do hotel
    novoHospede->prox = hotel->inicio;
    hotel->inicio = novoHospede;
    printf("Hóspede %s cadastrado no quarto %d com sucesso!\n", nome, quarto);
}

// Função para listar os hóspedes em ordem alfabética
void listarHospedes(Hotel *hotel) {
    printf("Lista de Hóspedes em Ordem Alfabética:\n");
    // Verifica se há hóspedes cadastrados no hotel
    if (hotel->inicio == NULL) {
        printf("Ops! Não há hóspedes cadastrados no momento.\n");
        return;
    }

// Conta o número de hóspedes e cria um array de ponteiros para hóspedes
    int numHospedes = 0;
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        numHospedes++;
        atual = atual->prox;
    }

  Hospede *arrayHospedes[numHospedes];
    atual = hotel->inicio;
    int i = 0;
    while (atual != NULL) {
        arrayHospedes[i] = atual;
        atual = atual->prox;
        i++;
    }

// Ordena o array de hóspedes em ordem alfabética pelo nome
    for (int i = 0; i < numHospedes - 1; i++) {
        for (int j = 0; j < numHospedes - i - 1; j++) {
            if (strcmp(arrayHospedes[j]->nome, arrayHospedes[j + 1]->nome) > 0) {
                Hospede *temp = arrayHospedes[j];
                arrayHospedes[j] = arrayHospedes[j + 1];
                arrayHospedes[j + 1] = temp;
            }
        }
    }
  // Imprime os hóspedes na lista ordenada
    for (int i = 0; i < numHospedes; i++) {
        printf("Quarto %d: %s\n", arrayHospedes[i]->quarto, arrayHospedes[i]->nome);
    }
}
// Função para buscar um hóspede pelo nome
void buscarHospede(Hotel *hotel, char nome[]) {
    Hospede *atual = hotel->inicio;
    // Percorre a lista de hóspedes buscando pelo nome fornecido
    while (atual != NULL) {
        if (strcmp(atual->nome, nome) == 0) {
            printf("Hóspede %s encontrado no quarto %d.\n", nome, atual->quarto);
            return;
        }
 atual = atual->prox;
    }
    printf("Ops! Hóspede %s não encontrado.\n", nome);
}

// Função para editar o nome de um hóspede
void editarNomeHospede(Hotel *hotel, char nomeAntigo[], char nomeNovo[]) {
    Hospede *atual = hotel->inicio;
 // Percorre a lista de hóspedes buscando pelo nome antigo fornecido
    while (atual != NULL) {
        if (strcmp(atual->nome, nomeAntigo) == 0) {
            // Atualiza o nome do hóspede com o novo nome fornecido
            strcpy(atual->nome, nomeNovo);
            printf("Nome do hóspede atualizado com sucesso.\n");
            return;
        }
        atual = atual->prox;
    }
    printf("Ops! Hóspede %s não encontrado.\n", nomeAntigo);
}
// Função para liberar um quarto, removendo o hóspede associado a ele
void liberarQuarto(Hotel *hotel, int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_QUARTOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n", MAX_QUARTOS);
        return;
    }
// Percorre a lista de hóspedes buscando pelo quarto fornecido
    Hospede *anterior = NULL;
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        if (atual->quarto == quarto) {
 // Remove o hóspede associado ao quarto e libera a memória
            if (anterior == NULL) {
                hotel->inicio = atual->prox;
            } else {
                anterior->prox = atual->prox;
            }
            free(atual);
            printf("Quarto %d liberado com sucesso.\n", quarto);
            return;
        }
        anterior = atual;
        atual = atual->prox;
    }
    printf("Ops! Quarto %d não encontrado.\n", quarto);
}

// Função para mostrar os quartos vazios disponíveis no hotel
void mostrarQuartosVazios(Hotel *hotel) {
    int quartosOcupados[MAX_QUARTOS] = {0};
    // Marca os quartos ocupados na lista de hóspedes
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        quartosOcupados[atual->quarto - 1] = 1;
        atual = atual->prox;
    }
// Exibe os quartos vazios disponíveis
    printf("Quartos vazios disponíveis:\n");
    for (int i = 0; i < MAX_QUARTOS; i++) {
        if (quartosOcupados[i] == 0) {
            printf("Quarto %d\n", i + 1);
        }
    }
}


// Função para salvar a lista de hóspedes em um arquivo
void salvarLista(Hotel *hotel) {
    FILE *arquivo = fopen(ARQUIVO, "w");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("Ops! Erro ao abrir o arquivo para salvar a lista de hóspedes!\n");
        return;
    }


// Escreve os dados de cada hóspede no arquivo
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        fprintf(arquivo, "%s %d\n", atual->nome, atual->quarto);
        atual = atual->prox;
    }
    fclose(arquivo);
    printf("Lista de hóspedes salva com sucesso!\n");
}


// Função para carregar a lista de hóspedes de um arquivo
void carregarLista(Hotel *hotel) {
    FILE *arquivo = fopen(ARQUIVO, "r");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("Arquivo de hóspedes não encontrado. Será criado um novo arquivo.\n");
        return;
    }

  // Lê os dados de cada hóspede do arquivo e os cadastra no hotel
    char nome[MAX_NOME];
    int quarto;
    while (fscanf(arquivo, " %[^\n] %d", nome, &quarto) == 2) {
        cadastrarHospede(hotel, nome, quarto);
    }
    fclose(arquivo);
    printf("Lista de hóspedes carregada com sucesso!\n");
}

// Função principal
int main() {
    Hotel *hotel = inicializarHotel(); // Inicializa o hotel
    carregarLista(hotel); // Carrega a lista de hóspedes do arquivo

    int opcao, quarto;
    char nome[MAX_NOME];
    char novoNome[MAX_NOME];

 // Loop do menu principal
    do {
        // Exibe o menu de opções
        printf("\nMenu:\n");
        printf("1. Cadastrar Hóspede\n");
        printf("2. Listar Hóspedes em Ordem Alfabética\n");
        printf("3. Buscar Hóspede\n");
        printf("4. Editar Nome do Hóspede\n");
        printf("5. Liberar Quarto\n");
        printf("6. Mostrar Quartos Vazios\n");
        printf("7. Salvar Lista de Hóspedes\n");
        printf("8. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

// Executa a opção escolhida pelo usuário
        switch (opcao) {
            case 1:
                printf("Digite o nome do hóspede: ");
                scanf(" %[^\n]", nome);
                printf("Digite o número do quarto (1 a %d): ", MAX_QUARTOS);
                scanf("%d", &quarto);
                cadastrarHospede(hotel, nome, quarto);
                break;
 case 2:
                listarHospedes(hotel);
                break;
            case 3:
                printf("Digite o nome do hóspede a ser buscado: ");
                scanf(" %[^\n]", nome);
                buscarHospede(hotel, nome);
                break;
            case 4:
                printf("Digite o nome do hóspede a ser editado: ");
                scanf(" %[^\n]", nome);
                printf("Digite o novo nome: ");
                scanf(" %[^\n]", novoNome);
                editarNomeHospede(hotel, nome, novoNome);
                break;
 case 5:
                printf("Digite o número do quarto a ser liberado (1 a %d): ", MAX_QUARTOS);
                scanf("%d", &quarto);
                liberarQuarto(hotel, quarto);
                break;
