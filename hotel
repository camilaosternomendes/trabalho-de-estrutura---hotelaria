#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOMINAL 90
#define MAX_ESPACOS 30
#define ARQUIVO "visitantes.txt"

// Definicao da estrutura de dados para representar um hospede
typedef struct Convidado {
    char apelido[MAX_NOMINAL];
    int quarto;
    struct Convidado *proximo;
} Convidado;

// Definicao da estrutura de dados para representar um hotel
typedef struct {
    Convidado *comeco;
} Pousada;

// Funcao para inicializar o hotel, alocando memoria e inicializando a lista de hospedes
Pousada* comecarPousada() {
    // Aloca memoria para a estrutura Pousada
    Pousada *pousada = (Pousada*)malloc(sizeof(Pousada));
    // Verifica se a alocacao foi bem-sucedida
    if (pousada == NULL) {
        printf("Ops! Houve um erro ao criar a pousada. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
    // Inicializa a lista de hospedes como vazia
    pousada->comeco = NULL;
    return pousada;
}

// Funcao para cadastrar um novo hospede no hotel
void convidarHospede(Pousada *pousada, char apelido[], int quarto) {
    // Verifica se o numero do quarto e valido
    if (quarto < 1 || quarto > MAX_ESPACOS) {
        printf("Ops! Numero do quarto invalido. Escolha um numero entre 1 e %d.\n", MAX_ESPACOS);
        return;
    }
    // Aloca memoria para o novo hospede
    Convidado *novoConvidado = (Convidado*)malloc(sizeof(Convidado));
    // Verifica se a alocacao foi bem-sucedida
    if (novoConvidado == NULL) {
        printf("Ops! Houve um problema ao convidar o hospede. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
    // Copia o nome e atribui o numero do quarto ao novo hospede
    strcpy(novoConvidado->apelido, apelido);
    novoConvidado->quarto = quarto;
    // Insere o novo hospede no comeco da lista de hospedes do hotel
    novoConvidado->proximo = pousada->comeco;
    pousada->comeco = novoConvidado;
    printf("\n\n\n\nHospede %s convidado para o quarto %d com sucesso!\n\n\n", apelido, quarto);
}

// Funcao para listar os hospedes em ordem alfabetica
void listarHospedes(Pousada *pousada) {
    printf("Lista de Hospedes em Ordem Alfabetica:\n");
    // Verifica se ha hospedes cadastrados no hotel
    if (pousada->comeco == NULL) {
        printf("Ops! Nao ha hospedes cadastrados no momento.\n");
        return;
    }
    // Conta o numero de hospedes e cria um array de ponteiros para hospedes
    int numHospedes = 0;
    Convidado *atual = pousada->comeco;
    while (atual != NULL) {
        numHospedes++;
        atual = atual->proximo;
    }
    Convidado *listaHospedes[numHospedes];
    atual = pousada->comeco;
    int i = 0;
    while (atual != NULL) {
        listaHospedes[i] = atual;
        atual = atual->proximo;
        i++;
    }
    // Ordena o array de hospedes em ordem alfabetica pelo nome
    for (int i = 0; i < numHospedes - 1; i++) {
        for (int j = 0; j < numHospedes - i - 1; j++) {
            if (strcmp(listaHospedes[j]->apelido, listaHospedes[j + 1]->apelido) > 0) {
                Convidado *temporario = listaHospedes[j];
                listaHospedes[j] = listaHospedes[j + 1];
                listaHospedes[j + 1] = temporario;
            }
        }
    }
    // Imprime os hospedes na lista ordenada
    for (int i = 0; i < numHospedes; i++) {
        printf("hospede %s esta no Quarto: %d \n\n\n", listaHospedes[i]->apelido,listaHospedes[i]->quarto);
    }
}

// Funcao para buscar um hospede pelo nome
void procurarHospede(Pousada *pousada, char apelido[]) {
    Convidado *atual = pousada->comeco;
    // Percorre a lista de hospedes buscando pelo nome fornecido
    while (atual != NULL) {
        if (strcmp(atual->apelido, apelido) == 0) {
            printf("Hospede %s encontrado no quarto %d.\n\n\n", apelido, atual->quarto);
            return;
        }
        atual = atual->proximo;
    }
    printf("Ops! Hospede %s nao encontrado.\n\n\n", apelido);
}

// Funcao para editar o nome de um hospede
void editarNomeHospede(Pousada *pousada, char apelidoAntigo[], char apelidoNovo[]) {
    Convidado *atual = pousada->comeco;
    // Percorre a lista de hospedes buscando pelo nome antigo fornecido
    while (atual != NULL) {
        if (strcmp(atual->apelido, apelidoAntigo) == 0) {
            // Atualiza o nome do hospede com o novo nome fornecido
            strcpy(atual->apelido, apelidoNovo);
            printf("Nome do hospede foi atualizado!!!!.\n\n\n");
            return;
        }
        atual = atual->proximo;
    }
    printf("==Ops! Hospede %s nao encontrado.\n\n\n", apelidoAntigo);
}

// Funcao para liberar um quarto, removendo o hospede associado a ele
void liberarQuarto(Pousada *pousada, int quarto) {
    // Verifica se o numero do quarto e valido
    if (quarto < 1 || quarto > MAX_ESPACOS) {
        printf("Ops! Numero do quarto invalido. Escolha um numero entre 1 e %d.\n\n\n", MAX_ESPACOS);
        return;
    }
    // Percorre a lista de hospedes buscando pelo quarto fornecido
    Convidado *anterior = NULL;
    Convidado *atual = pousada->comeco;
    while (atual != NULL) {
        if (atual->quarto == quarto) {
            // Remove o hospede associado ao quarto e libera a memoria
            if (anterior == NULL) {
                pousada->comeco = atual->proximo;
            } else {
                anterior->proximo = atual->proximo;
            }
            free(atual);
            printf("Quarto %d liberado com sucesso!!.\n\n\n", quarto);
            return;
        }
        anterior = atual;
        atual = atual->proximo;
    }
    printf("Ops! Quarto %d nao encontrado.\n\n\n", quarto);
}

// Funcao para mostrar os quartos vazios disponiveis no hotel
void mostrarQuartosVazios(Pousada *pousada) {
    int quartosOcupados[MAX_ESPACOS] = {0};
    // Marca os quartos ocupados na lista de hospedes
    Convidado *atual = pousada->comeco;
    while (atual != NULL) {
        quartosOcupados[atual->quarto - 1] = 1;
        atual = atual->proximo;
    }
    // Exibe os quartos vazios disponiveis
    printf("estes sao os quartos que ainda estao disponiveis:\n\n\n");
    for (int i = 0; i < MAX_ESPACOS; i++) {
        if (quartosOcupados[i] == 0) {
            printf("Quarto %d\n\n\n", i + 1);
        }
    }
}

// Funcao para salvar a lista de hospedes em um arquivo
void salvarLista(Pousada *pousada) {
    FILE *arquivo = fopen(ARQUIVO, "w");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("Ops! Erro ao abrir o arquivo para salvar a lista de hospedes!\n\n\n");
        return;
    }
    // Escreve os dados de cada hospede no arquivo
    Convidado *atual = pousada->comeco;
    while (atual != NULL) {
        fprintf(arquivo, "%s %d\n\n\n", atual->apelido, atual->quarto);
        atual = atual->proximo;
    }
    fclose(arquivo);
    printf("Lista de hospedes salva com sucesso!\n\n");
}

// Funcao para carregar a lista de hospedes de um arquivo
void carregarLista(Pousada *pousada) {
    FILE *arquivo = fopen(ARQUIVO, "r");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("===  criando um novo arquivo de hospedes  ===\n\n");
        return;
    }
    // Le os dados de cada hospede do arquivo e os cadastra no hotel
    char apelido[MAX_NOMINAL];
    int quarto;
    while (fscanf(arquivo, " %[^\n] %d", apelido, &quarto) == 2) {
        convidarHospede(pousada, apelido, quarto);
    }
    fclose(arquivo);
    printf("Lista de hospedes carregada com sucesso!\n\n\n");
}

// Funcao principal
int main() {
    Pousada *pousada = comecarPousada(); // Inicializa o hotel
    carregarLista(pousada); // Carrega a lista de hospedes do arquivo

    int opcao, quarto;
    char apelido[MAX_NOMINAL];
    char novoApelido[MAX_NOMINAL];

    // Loop do menu principal
    do {
        // Exibe o menu de opcoes
        printf("\n\n\n\n\n\nMenu:\n");
        printf("\n\n1. Convidar Novo Hospede\n");
        printf("\n\n2. Listar Hospedes em Ordem Alfabetica\n");
        printf("\n\n3. Procurar Hospede\n");
        printf("\n\n4. Editar Apelido do Hospede\n");
        printf("\n\n5. Liberar Quarto\n");
        printf("\n\n6. Mostrar Quais Espacos estao Disponiveis\n");
        printf("\n\n7. Salvar Lista de Hospedes\n");
        printf("\n\n8. Sair do Programa\n");
        printf("\n\nEscolha uma opcao: ");
        scanf("%d", &opcao);

        // Executa a opcao escolhida pelo usuario
        switch (opcao) {
            case 1:
                printf("\nInsira o apelido do hospede:\n ");
                scanf(" %[^\n]", apelido);
                printf("\nInsira o numero do quarto (1 a %d):\n ", MAX_ESPACOS);
                scanf("%d", &quarto);
                convidarHospede(pousada, apelido, quarto);
                break;
            case 2:
                listarHospedes(pousada);
                break;
            case 3:
                printf("\nInsira o apelido do hospede a que esta procurando:\n ");
                scanf(" %[^\n]", apelido);
                procurarHospede(pousada, apelido);
                break;
            case 4:
                printf("\nInsira o apelido do hospede que deseja editar:\n ");
                scanf(" %[^\n]", apelido);
                printf("\nInsira o novo apelido:\n ");
                scanf(" %[^\n]", novoApelido);
                editarNomeHospede(pousada, apelido, novoApelido);
                break;
            case 5:
                printf("\nInsira o numero do quarto a ser liberado (1 a %d):\n ", MAX_ESPACOS);
                scanf("%d", &quarto);

                liberarQuarto(pousada, quarto);
                break;
            case 6:
                mostrarQuartosVazios(pousada);
                break;
            case 7:
                salvarLista(pousada);
                break;
            case 8:
                printf("Finalizando e fechando o programa...\n");
                break;
            default:
                printf("\nOps! Opcao invalida. Por favor, escolha uma opcao valida.\n\n");
        }
    } while (opcao != 8);

    // Libera a memoria alocada para o hotel
    free(pousada);
    return 0;
}
