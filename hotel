#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOME 50
#define MAX_QUARTOS 50
#define ARQUIVO "hospedes.txt"
// Definição da estrutura de dados para representar um hóspede
typedef struct Hospede {
    char nome[MAX_NOME];
    int quarto;
    struct Hospede *prox;
} Hospede;

// Definição da estrutura de dados para representar um hotel
typedef struct {
    Hospede *inicio;
} Hotel;
// Função para inicializar o hotel, alocando memória e inicializando a lista de hóspedes
Hotel* inicializarHotel() {
    // Aloca memória para a estrutura Hotel
    Hotel hotel = (Hotel)malloc(sizeof(Hotel));
 // Verifica se a alocação foi bem-sucedida
    if (hotel == NULL) {
        printf("Ops! Houve um erro ao criar o hotel. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
// Inicializa a lista de hóspedes como vazia
    hotel->inicio = NULL;
    return hotel;
}
// Função para cadastrar um novo hóspede no hotel
void cadastrarHospede(Hotel *hotel, char nome[], int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_QUARTOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n", MAX_QUARTOS);
        return;
    }
// Aloca memória para o novo hóspede
    Hospede novoHospede = (Hospede)malloc(sizeof(Hospede));
    // Verifica se a alocação foi bem-sucedida
    if (novoHospede == NULL) {
        printf("Ops! Houve um problema ao cadastrar o hóspede. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }

 // Copia o nome e atribui o número do quarto ao novo hóspede
    strcpy(novoHospede->nome, nome);
    novoHospede->quarto = quarto;
    // Insere o novo hóspede no início da lista de hóspedes do hotel
    novoHospede->prox = hotel->inicio;
    hotel->inicio = novoHospede;
    printf("Hóspede %s cadastrado no quarto %d com sucesso!\n", nome, quarto);
}

// Função para listar os hóspedes em ordem alfabética
void listarHospedes(Hotel *hotel) {
    printf("Lista de Hóspedes em Ordem Alfabética:\n");
    // Verifica se há hóspedes cadastrados no hotel
    if (hotel->inicio == NULL) {
        printf("Ops! Não há hóspedes cadastrados no momento.\n");
        return;
    }

// Conta o número de hóspedes e cria um array de ponteiros para hóspedes
    int numHospedes = 0;
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        numHospedes++;
        atual = atual->prox;
    }

  Hospede *arrayHospedes[numHospedes];
    atual = hotel->inicio;
    int i = 0;
    while (atual != NULL) {
        arrayHospedes[i] = atual;
        atual = atual->prox;
        i++;
    }

// Ordena o array de hóspedes em ordem alfabética pelo nome
    for (int i = 0; i < numHospedes - 1; i++) {
        for (int j = 0; j < numHospedes - i - 1; j++) {
            if (strcmp(arrayHospedes[j]->nome, arrayHospedes[j + 1]->nome) > 0) {
                Hospede *temp = arrayHospedes[j];
                arrayHospedes[j] = arrayHospedes[j + 1];
                arrayHospedes[j + 1] = temp;
            }
        }
    }
  // Imprime os hóspedes na lista ordenada
    for (int i = 0; i < numHospedes; i++) {
        printf("Quarto %d: %s\n", arrayHospedes[i]->quarto, arrayHospedes[i]->nome);
    }
}
// Função para buscar um hóspede pelo nome
void buscarHospede(Hotel *hotel, char nome[]) {
    Hospede *atual = hotel->inicio;
    // Percorre a lista de hóspedes buscando pelo nome fornecido
    while (atual != NULL) {
        if (strcmp(atual->nome, nome) == 0) {
            printf("Hóspede %s encontrado no quarto %d.\n", nome, atual->quarto);
            return;
        }
 atual = atual->prox;
    }
    printf("Ops! Hóspede %s não encontrado.\n", nome);
}

// Função para editar o nome de um hóspede
void editarNomeHospede(Hotel *hotel, char nomeAntigo[], char nomeNovo[]) {
    Hospede *atual = hotel->inicio;
 // Percorre a lista de hóspedes buscando pelo nome antigo fornecido
    while (atual != NULL) {
        if (strcmp(atual->nome, nomeAntigo) == 0) {
            // Atualiza o nome do hóspede com o novo nome fornecido
            strcpy(atual->nome, nomeNovo);
            printf("Nome do hóspede atualizado com sucesso.\n");
            return;
        }
        atual = atual->prox;
    }
    printf("Ops! Hóspede %s não encontrado.\n", nomeAntigo);
}
// Função para liberar um quarto, removendo o hóspede associado a ele
void liberarQuarto(Hotel *hotel, int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_QUARTOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n", MAX_QUARTOS);
        return;
    }
// Percorre a lista de hóspedes buscando pelo quarto fornecido
    Hospede *anterior = NULL;
    Hospede *atual = hotel->inicio;
    while (atual != NULL) {
        if (atual->quarto == quarto) {
 // Remove o hóspede associado ao quarto e libera a memória
            if (anterior == NULL) {
                hotel->inicio = atual->prox;
            } else {
                anterior->prox = atual->prox;
            }
            free(atual);
            printf("Quarto %d liberado com sucesso.\n", quarto);
            return;
        }
        anterior = atual;
        atual = atual->prox;
    }
    printf("Ops! Quarto %d não encontrado.\n", quarto);
}
