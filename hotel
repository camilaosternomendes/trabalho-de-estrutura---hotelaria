#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOMINAL 90
#define MAX_ESPAÇOS 30
#define ARQUIVO "visitantes.txt"

// Definição da estrutura de dados para representar um hóspede
typedef struct Convidado {
    char apelido[MAX_NOMINAL];
    int quarto;
    struct Convidado *próximo;
} Convidado;

// Definição da estrutura de dados para representar um hotel
typedef struct {
    Convidado *começo;
} Pousada;

// Função para inicializar o hotel, alocando memória e inicializando a lista de hóspedes
Pousada* começarPousada() {
    // Aloca memória para a estrutura Pousada
    Pousada *pousada = (Pousada*)malloc(sizeof(Pousada));
    // Verifica se a alocação foi bem-sucedida
    if (pousada == NULL) {
        printf("Ops! Houve um erro ao criar a pousada. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
    // Inicializa a lista de hóspedes como vazia
    pousada->começo = NULL;
    return pousada;
}

// Função para cadastrar um novo hóspede no hotel
void convidarHóspede(Pousada *pousada, char apelido[], int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_ESPAÇOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n", MAX_ESPAÇOS);
        return;
    }
    // Aloca memória para o novo hóspede
    Convidado *novoConvidado = (Convidado*)malloc(sizeof(Convidado));
    // Verifica se a alocação foi bem-sucedida
    if (novoConvidado == NULL) {
        printf("Ops! Houve um problema ao convidar o hóspede. Por favor, tente novamente mais tarde.\n");
        exit(EXIT_FAILURE);
    }
    // Copia o nome e atribui o número do quarto ao novo hóspede
    strcpy(novoConvidado->apelido, apelido);
    novoConvidado->quarto = quarto;
    // Insere o novo hóspede no começo da lista de hóspedes do hotel
    novoConvidado->próximo = pousada->começo;
    pousada->começo = novoConvidado;
    printf("\n\n\n\nHóspede %s convidado para o quarto %d com sucesso!\n\n\n", apelido, quarto);
}

// Função para listar os hóspedes em ordem alfabética
void listarHóspedes(Pousada *pousada) {
    printf("Lista de Hóspedes em Ordem Alfabética:\n");
    // Verifica se há hóspedes cadastrados no hotel
    if (pousada->começo == NULL) {
        printf("Ops! Não há hóspedes cadastrados no momento.\n");
        return;
    }
    // Conta o número de hóspedes e cria um array de ponteiros para hóspedes
    int numHóspedes = 0;
    Convidado *atual = pousada->começo;
    while (atual != NULL) {
        numHóspedes++;
        atual = atual->próximo;
    }
    Convidado *listaHóspedes[numHóspedes];
    atual = pousada->começo;
    int i = 0;
    while (atual != NULL) {
        listaHóspedes[i] = atual;
        atual = atual->próximo;
        i++;
    }
    // Ordena o array de hóspedes em ordem alfabética pelo nome
    for (int i = 0; i < numHóspedes - 1; i++) {
        for (int j = 0; j < numHóspedes - i - 1; j++) {
            if (strcmp(listaHóspedes[j]->apelido, listaHóspedes[j + 1]->apelido) > 0) {
                Convidado *temporário = listaHóspedes[j];
                listaHóspedes[j] = listaHóspedes[j + 1];
                listaHóspedes[j + 1] = temporário;
            }
        }
    }
    // Imprime os hóspedes na lista ordenada
    for (int i = 0; i < numHóspedes; i++) {
        printf("hospede %s esta no Quarto: %d \n\n\n", listaHóspedes[i]->apelido,listaHóspedes[i]->quarto);
    }
}

// Função para buscar um hóspede pelo nome
void procurarHóspede(Pousada *pousada, char apelido[]) {
    Convidado *atual = pousada->começo;
    // Percorre a lista de hóspedes buscando pelo nome fornecido
    while (atual != NULL) {
        if (strcmp(atual->apelido, apelido) == 0) {
            printf("Hóspede %s encontrado no quarto %d.\n\n\n", apelido, atual->quarto);
            return;
        }
        atual = atual->próximo;
    }
    printf("Ops! Hóspede %s não encontrado.\n\n\n", apelido);
}

// Função para editar o nome de um hóspede
void editarNomeHóspede(Pousada *pousada, char apelidoAntigo[], char apelidoNovo[]) {
    Convidado *atual = pousada->começo;
    // Percorre a lista de hóspedes buscando pelo nome antigo fornecido
    while (atual != NULL) {
        if (strcmp(atual->apelido, apelidoAntigo) == 0) {
            // Atualiza o nome do hóspede com o novo nome fornecido
            strcpy(atual->apelido, apelidoNovo);
            printf("Nome do hóspede foi atualizado!!!!.\n\n\n");
            return;
        }
        atual = atual->próximo;
    }
    printf("==Ops! Hóspede %s não encontrado.\n\n\n", apelidoAntigo);
}

// Função para liberar um quarto, removendo o hóspede associado a ele
void liberarQuarto(Pousada *pousada, int quarto) {
    // Verifica se o número do quarto é válido
    if (quarto < 1 || quarto > MAX_ESPAÇOS) {
        printf("Ops! Número do quarto inválido. Escolha um número entre 1 e %d.\n\n\n", MAX_ESPAÇOS);
        return;
    }
    // Percorre a lista de hóspedes buscando pelo quarto fornecido
    Convidado *anterior = NULL;
    Convidado *atual = pousada->começo;
    while (atual != NULL) {
        if (atual->quarto == quarto) {
            // Remove o hóspede associado ao quarto e libera a memória
            if (anterior == NULL) {
                pousada->começo = atual->próximo;
            } else {
                anterior->próximo = atual->próximo;
            }
            free(atual);
            printf("Quarto %d liberado com sucesso!!.\n\n\n", quarto);
            return;
        }
        anterior = atual;
        atual = atual->próximo;
    }
    printf("Ops! Quarto %d não encontrado.\n\n\n", quarto);
}

// Função para mostrar os quartos vazios disponíveis no hotel
void mostrarQuartosVazios(Pousada *pousada) {
    int quartosOcupados[MAX_ESPAÇOS] = {0};
    // Marca os quartos ocupados na lista de hóspedes
    Convidado *atual = pousada->começo;
    while (atual != NULL) {
        quartosOcupados[atual->quarto - 1] = 1;
        atual = atual->próximo;
    }
    // Exibe os quartos vazios disponíveis
    printf("estes são os quartos que ainda estão disponiveis:\n\n\n");
    for (int i = 0; i < MAX_ESPAÇOS; i++) {
        if (quartosOcupados[i] == 0) {
            printf("Quarto %d\n\n\n", i + 1);
        }
    }
}

// Função para salvar a lista de hóspedes em um arquivo
void salvarLista(Pousada *pousada) {
    FILE *arquivo = fopen(ARQUIVO, "w");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("Ops! Erro ao abrir o arquivo para salvar a lista de hóspedes!\n\n\n");
        return;
    }
    // Escreve os dados de cada hóspede no arquivo
    Convidado *atual = pousada->começo;
    while (atual != NULL) {
        fprintf(arquivo, "%s %d\n\n\n", atual->apelido, atual->quarto);
        atual = atual->próximo;
    }
    fclose(arquivo);
    printf("Lista de hóspedes salva com sucesso!\n\n");
}

// Função para carregar a lista de hóspedes de um arquivo
void carregarLista(Pousada *pousada) {
    FILE *arquivo = fopen(ARQUIVO, "r");
    // Verifica se o arquivo foi aberto corretamente
    if (arquivo == NULL) {
        printf("===  criando um novo arquivo de hospedes  ===\n\n");
        return;
    }
    // Lê os dados de cada hóspede do arquivo e os cadastra no hotel
    char apelido[MAX_NOMINAL];
    int quarto;
    while (fscanf(arquivo, " %[^\n] %d", apelido, &quarto) == 2) {
        convidarHóspede(pousada, apelido, quarto);
    }
    fclose(arquivo);
    printf("Lista de hóspedes carregada com sucesso!\n\n\n");
}

// Função principal
int main() {
    Pousada *pousada = começarPousada(); // Inicializa o hotel
    carregarLista(pousada); // Carrega a lista de hóspedes do arquivo

    int opção, quarto;
    char apelido[MAX_NOMINAL];
    char novoApelido[MAX_NOMINAL];

    // Loop do menu principal
    do {
        // Exibe o menu de opções
        printf("\n\n\n\n\n\nMenu:\n");
        printf("\n\n1. Convidar Novo Hóspede\n");
        printf("\n\n2. Listar Hóspedes em Ordem Alfabética\n");
        printf("\n\n3. Procurar Hóspede\n");
        printf("\n\n4. Editar Apelido do Hóspede\n");
        printf("\n\n5. Liberar Quarto\n");
        printf("\n\n6. Mostrar Quais Espaços estão Disponíveis\n");
        printf("\n\n7. Salvar Lista de Hóspedes\n");
        printf("\n\n8. Sair do Programa\n");
        printf("\n\nEscolha uma opção: ");
        scanf("%d", &opção);

        // Executa a opção escolhida pelo usuário
        switch (opção) {
            case 1:
                printf("\nInsira o apelido do hóspede:\n ");
                scanf(" %[^\n]", apelido);
                printf("\nInsira o número do quarto (1 a %d):\n ", MAX_ESPAÇOS);
                scanf("%d", &quarto);
                convidarHóspede(pousada, apelido, quarto);
                break;
            case 2:
                listarHóspedes(pousada);
                break;
            case 3:
                printf("\nInsira o apelido do hóspede a que esta procurando:\n ");
                scanf(" %[^\n]", apelido);
                procurarHóspede(pousada, apelido);
                break;
            case 4:
                printf("\nInsira o apelido do hóspede que deseja editar:\n ");
                scanf(" %[^\n]", apelido);
                printf("\nInsira o novo apelido:\n ");
                scanf(" %[^\n]", novoApelido);
                editarNomeHóspede(pousada, apelido, novoApelido);
                break;
            case 5:
                printf("\nInsira o número do quarto a ser liberado (1 a %d):\n ", MAX_ESPAÇOS);
                scanf("%d", &quarto);

                liberarQuarto(pousada, quarto);
                break;
            case 6:
                mostrarQuartosVazios(pousada);
                break;
            case 7:
                salvarLista(pousada);
                break;
            case 8:
                printf("Finalizando e fechando o programa...\n");
                break;
            default:
                printf("\nOps! Opção inválida. Por favor, escolha uma opção válida.\n\n");
        }
    } while (opção != 8);

    // Libera a memória alocada para o hotel
    free(pousada);
    return 0;
}
